{{#section 'css'}}
<link rel="stylesheet" href="/public/css/admin-side/dashboard.css">
<style>
    .dashboard-cards {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 30px;
    }

    .dashboard-card {
        flex: 1;
        min-width: 250px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
        transition: all 0.3s ease;
    }

    .dashboard-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .card-title {
        font-size: 16px;
        color: #555;
        margin: 0;
    }

    .card-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
    }

    .card-value {
        font-size: 28px;
        font-weight: 600;
        margin: 10px 0;
    }

    .card-description {
        font-size: 13px;
        color: #777;
    }

    .card-pending {
        color: #ff9800;
    }

    .card-approved {
        color: #4caf50;
    }

    .card-completed {
        color: #2196f3;
    }

    .card-total {
        color: #9c27b0;
    }

    .bg-light-pending {
        background-color: rgba(255, 152, 0, 0.1);
    }

    .bg-light-approved {
        background-color: rgba(76, 175, 80, 0.1);
    }

    .bg-light-completed {
        background-color: rgba(33, 150, 243, 0.1);
    }

    .bg-light-total {
        background-color: rgba(156, 39, 176, 0.1);
    }

    /* Calendar Styles */
    .calendar-container {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 30px;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .calendar-title {
        font-size: 18px;
        color: #333;
        margin: 0;
    }

    .calendar-navigation {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .calendar-nav-btn {
        background-color: #f0f0f0;
        border: none;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .calendar-nav-btn:hover {
        background-color: #e0e0e0;
    }

    .current-month {
        font-size: 16px;
        font-weight: 500;
        min-width: 150px;
        text-align: center;
    }

    .calendar-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

    .calendar-table th {
        background-color: #f8f9fa;
        padding: 12px;
        text-align: center;
        font-size: 14px;
        color: #555;
        border-bottom: 1px solid #e0e0e0;
    }

    .calendar-table td {
        height: 100px;
        border: 1px solid #e0e0e0;
        vertical-align: top;
        padding: 8px;
    }

    .calendar-date {
        font-weight: 500;
        margin-bottom: 5px;
        display: block;
    }

    .calendar-day-today {
        background-color: rgba(33, 150, 243, 0.1);
    }

    .calendar-day-weekend {
        background-color: #f9f9f9;
    }

    .calendar-day-other-month {
        background-color: #f5f5f5;
        color: #aaa;
    }

    .calendar-event {
        background-color: #2196f3;
        color: white;
        padding: 6px;
        border-radius: 3px;
        font-size: 12px;
        margin-bottom: 4px;
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .event-time {
        font-weight: bold;
        margin-bottom: 3px;
        font-size: 11px;
        display: block;
    }

    .event-title {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .calendar-event-in_progress {
        background-color: #ff9800;
    }

    .calendar-event-completed {
        background-color: #4caf50;
    }

    .empty-day {
        color: #ddd;
        text-align: center;
        padding-top: 30px;
    }

    .welcome-message {
        margin-bottom: 30px;
    }

    .welcome-message h1 {
        font-size: 24px;
        margin-bottom: 10px;
        color: #333;
    }

    .welcome-message p {
        color: #666;
        font-size: 15px;
        max-width: 800px;
    }
</style>
{{/section}}

<div class="welcome-message">
    <h1>Welcome to Lab Technician Dashboard</h1>
    <p>Manage and track test requests, process lab results, and view your schedule all in one place.</p>
</div>

<div class="dashboard-cards">
    <div class="dashboard-card">
        <div class="card-header">
            <h3 class="card-title">Pending Requests</h3>
            <div class="card-icon bg-light-pending">
                <i class="fas fa-hourglass-half card-pending"></i>
            </div>
        </div>
        <div class="card-value card-pending">{{pendingCount}}</div>
        <div class="card-description">Test requests awaiting processing</div>
    </div>

    <div class="dashboard-card">
        <div class="card-header">
            <h3 class="card-title">In Progress</h3>
            <div class="card-icon bg-light-approved">
                <i class="fas fa-spinner card-approved"></i>
            </div>
        </div>
        <div class="card-value card-approved">{{inProgressCount}}</div>
        <div class="card-description">Tests currently being processed</div>
    </div>

    <div class="dashboard-card">
        <div class="card-header">
            <h3 class="card-title">Completed Tests</h3>
            <div class="card-icon bg-light-completed">
                <i class="fas fa-check-circle card-completed"></i>
            </div>
        </div>
        <div class="card-value card-completed">{{completedCount}}</div>
        <div class="card-description">Tests completed this month</div>
    </div>

    <div class="dashboard-card">
        <div class="card-header">
            <h3 class="card-title">Total Tests</h3>
            <div class="card-icon bg-light-total">
                <i class="fas fa-flask card-total"></i>
            </div>
        </div>
        <div class="card-value card-total">{{totalCount}}</div>
        <div class="card-description">Total tests performed</div>
    </div>
</div>

<div class="calendar-container">
    <div class="calendar-header">
        <h2 class="calendar-title">Your Monthly Schedule</h2>
        <div class="calendar-navigation">
            <button id="prevMonth" class="calendar-nav-btn">
                <i class="fas fa-chevron-left"></i>
            </button>
            <div id="currentMonth" class="current-month">June 2023</div>
            <button id="nextMonth" class="calendar-nav-btn">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
    
    <div id="calendarWrapper">
        <table class="calendar-table" id="calendarTable">
            <thead>
                <tr>
                    <th>Sunday</th>
                    <th>Monday</th>
                    <th>Tuesday</th>
                    <th>Wednesday</th>
                    <th>Thursday</th>
                    <th>Friday</th>
                    <th>Saturday</th>
                </tr>
            </thead>
            <tbody id="calendarBody">
                <!-- Calendar will be generated by JavaScript -->
            </tbody>
        </table>
    </div>
</div>

{{#section 'js'}}
<script>
    $(document).ready(function() {
        let currentDate = new Date();
        let scheduleData = [];
        
        // Initialize the calendar
        loadScheduleData(currentDate);
        updateMonthDisplay(currentDate);
        
        // Previous month button click handler
        $('#prevMonth').click(function() {
            currentDate.setMonth(currentDate.getMonth() - 1);
            loadScheduleData(currentDate);
            updateMonthDisplay(currentDate);
        });
        
        // Next month button click handler
        $('#nextMonth').click(function() {
            currentDate.setMonth(currentDate.getMonth() + 1);
            loadScheduleData(currentDate);
            updateMonthDisplay(currentDate);
        });
        
        // Function to update the month display
        function updateMonthDisplay(date) {
            const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            $('#currentMonth').text(months[date.getMonth()] + ' ' + date.getFullYear());
        }
        
        // Function to load schedule data from API
        function loadScheduleData(date) {
            const month = date.getMonth();
            const year = date.getFullYear();
            
            fetch(`/labtech/dashboard/schedule-data?month=${month}&year=${year}`)
                .then(response => response.json())
                .then(data => {

                    if (data.success) {
                        scheduleData = data.scheduleData;
                    } else {
                        console.error('Failed to load schedule data:', data.message);
                        scheduleData = [];
                    }
                    renderCalendar(date);
                })
                .catch(error => {
                    console.error('Error fetching schedule data:', error);
                    scheduleData = [];
                    renderCalendar(date);
                });
        }
        
        // Function to render the calendar
        function renderCalendar(date) {
            const year = date.getFullYear();
            const month = date.getMonth();
            
            // Update the calendar header
            $('#currentMonthYear').text(
                date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })
            );
            
            // Get the first day of the month
            const firstDay = new Date(year, month, 1);
            // Get the last day of the month
            const lastDay = new Date(year, month + 1, 0);
            
            // Get the day of the week the first day falls on (0-6)
            const firstDayOfWeek = firstDay.getDay();
            
            // Clear existing calendar
            const calendarBody = document.getElementById('calendarBody');
            calendarBody.innerHTML = '';
            
            // Create the calendar grid
            let date_counter = 1;
            let row = document.createElement('tr');
            
            // Add empty cells for days before the first day of the month
            for (let i = 0; i < firstDayOfWeek; i++) {
                const cell = document.createElement('td');
                cell.className = 'calendar-day-other-month';
                const lastMonthDay = new Date(year, month, 0).getDate() - firstDayOfWeek + i + 1;
                cell.innerHTML = `<span class="calendar-date text-muted">${lastMonthDay}</span>`;
                row.appendChild(cell);
            }
            
            // Add cells for each day of the month
            const today = new Date();
            while (date_counter <= lastDay.getDate()) {
                if (row.children.length === 7) {
                    calendarBody.appendChild(row);
                    row = document.createElement('tr');
                }
                
                const dayOfWeek = (firstDayOfWeek + date_counter - 1) % 7;
                const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;
                const isToday = today.getDate() === date_counter && 
                               today.getMonth() === month && 
                               today.getFullYear() === year;
                
                const cell = document.createElement('td');
                if (isWeekend) cell.classList.add('calendar-day-weekend');
                if (isToday) cell.classList.add('calendar-day-today');
                
                cell.innerHTML = `<span class="calendar-date">${date_counter}</span>`;
                
                // Add schedule events for this day if any
                const dayEvents = getEventsForDay(year, month, date_counter);
                if (dayEvents.length > 0) {
                    dayEvents.forEach(event => {
                        const eventEl = document.createElement('div');
                        eventEl.className = `calendar-event calendar-event-${event.status}`;
                        
                        // Tạo phần tử riêng cho thời gian và tiêu đề
                        const timeEl = document.createElement('div');
                        timeEl.className = 'event-time';
                        timeEl.textContent = event.time;
                        
                        const titleEl = document.createElement('div');
                        titleEl.className = 'event-title';
                        titleEl.textContent = event.title;
                        
                        // Thêm vào event element
                        eventEl.appendChild(timeEl);
                        eventEl.appendChild(titleEl);
                        
                        cell.appendChild(eventEl);
                    });
                }
                
                row.appendChild(cell);
                date_counter++;
            }
            
            // Add empty cells for days after the last day of the month
            const remainingCells = 7 - row.children.length;
            if (remainingCells < 7) {
                for (let i = 1; i <= remainingCells; i++) {
                    const cell = document.createElement('td');
                    cell.className = 'calendar-day-other-month';
                    cell.innerHTML = `<span class="calendar-date text-muted">${i}</span>`;
                    row.appendChild(cell);
                }
            }
            
            // Add the last row to the calendar
            calendarBody.appendChild(row);
            
            // If we have less than 6 rows, add an additional row
            if (calendarBody.children.length < 6) {
                row = document.createElement('tr');
                for (let i = 0; i < 7; i++) {
                    const nextMonthDay = i + 1 + remainingCells;
                    const cell = document.createElement('td');
                    cell.className = 'calendar-day-other-month';
                    cell.innerHTML = `<span class="calendar-date text-muted">${nextMonthDay}</span>`;
                    row.appendChild(cell);
                }
                calendarBody.appendChild(row);
            }
        }
        
        // Function to get events for a specific day
        function getEventsForDay(year, month, day) {
            if (!scheduleData || scheduleData.length === 0) {
                return [];
            }
            
            // Format the date to compare with the date part of event.start
            // Need to pad month and day with leading zeros if needed
            const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            
            // Filter events that match the date
            const events = scheduleData.filter(event => {
                // Extract the date part from the event.start (format: YYYY-MM-DDThh:mm:ss)
                const eventDate = event.start.split('T')[0];
                return eventDate === dateStr;
            }).map(event => {
                // Extract time from the start property (format: YYYY-MM-DDThh:mm:ss)
                const time = event.start.split('T')[1].substring(0, 5);
                // Return a new object with the properties needed for display
                return {
                    id: event.id,
                    title: event.room,  // Show room number as title
                    time: time,         // Show just the time
                    status: event.status
                };
            });
                        
            return events;
        }
        
        // Initial load - render current month
        const new_currentDate = new Date();
        renderCalendar(new_currentDate); // Render calendar immediately
        loadScheduleData(new_currentDate); // Then load data asynchronously
    });
</script>
{{/section}} 