{{!-- Room List View --}}
<link rel="stylesheet" href="/public/css/admin-side/doctor-list.css"> {{!-- Reuse list styling --}}

<div class="patient-list-container">
    <div class="filters-bar">
        {{!-- Filters Section --}}
        <div class="filters-group">
            {{!-- Example: Add Specialty Filter Dropdown --}}
            
             {{!-- Example: Add Status Filter Dropdown --}}
            <select class="form-control form-control-sm" id="statusFilter">
                <option value="">All Status</option>
                <option value="available">Available</option>
                <option value="occupied">Occupied</option>
                <option value="maintenance">Maintenance</option>
            </select>
             {{!-- Example: Add Type Filter Dropdown --}}
            <select class="form-control form-control-sm" id="typeFilter">
                <option value="">All Types</option>
                 <option value="examination">Examination</option>
                 <option value="operation">Operation</option>
                 <option value="laboratory">Laboratory</option>
                 <option value="consultation">Consultation</option>
                 <option value="emergency">Emergency</option>
                 <option value="general">General</option>
            </select>
        </div>

        {{!-- Search Input --}}
        <div class="search-box flex-grow-1 mx-2"> {{!-- Allow search to grow --}}
            <input type="text" class="form-control form-control-sm" id="searchInput" placeholder="Search by number, specialty, description..." value="">
            <i class="fas fa-search"></i>
        </div>
         <a href="#" class="btn btn-sm btn-secondary" id="clearSearchBtn" title="Clear Search"><i class="fas fa-times"></i></a>

        {{!-- Add New Button --}}
        <a href="/admin/manage_room/add" class="add-new-btn ml-3"> {{!-- ml-3 for spacing --}}
            <i class="fas fa-plus"></i> Add New Room
        </a>
    </div>

    {{!-- Error display (if passed from server on initial load) --}}
    {{#if error}}
    <div class="alert alert-danger alert-dismissible fade show mt-3 mx-3" role="alert">
        {{error}}
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">×</span>
        </button>
    </div>
    {{/if}}

    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Number</th>
                    <th scope="col">Type</th>
                    <th scope="col">Specialty</th>
                    <th scope="col">Capacity</th>
                    <th scope="col">Status</th>
                    <th scope="col">Description</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody id="room-table-body">
                {{#each rooms}}
                <tr class="room-row"
                    data-id="{{roomId}}"
                    data-number="{{toLowerCase roomNumber}}"
                    data-type="{{toLowerCase roomType}}"
                    data-specialty-id="{{specialtyId}}" {{!-- Use ID for specialty filter --}}
                    data-specialty-name="{{toLowerCase specialtyName}}"
                    data-status="{{toLowerCase status}}"
                >
                    <td>{{roomNumber}}</td>
                    <td class="room-type">{{toUpperCase roomType}}</td>
                    <td class="room-specialty">{{#if specialtyName}}{{specialtyName}}{{else}}<span class="text-muted">General</span>{{/if}}</td>
                    <td>{{#if capacity}}{{capacity}}{{else}}<span class="text-muted">-</span>{{/if}}</td>
                    <td class="room-status">
                        <span class="status-badge
                            {{#if (eq status 'available')}}status-active{{/if}}
                            {{#if (eq status 'occupied')}}status-inactive{{/if}}
                            {{#if (eq status 'maintenance')}}status-pending{{/if}}
                        ">{{status}}</span>
                    </td>
                    <td class="room-description">{{#if description}}{{truncate description 80}}{{else}}<span class="text-muted">N/A</span>{{/if}}</td>
                    <td>
                        <div class="action-buttons">
                            <a href="/admin/manage_room/edit/{{roomId}}" class="btn btn-icon" title="Edit Room">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a href="#" class="btn btn-icon delete-room" title="Delete Room" data-toggle="modal" data-target="#deleteModal" data-id="{{roomId}}" data-number="{{roomNumber}}">
                                <i class="fas fa-trash-alt text-danger"></i>
                            </a>
                        </div>
                    </td>
                </tr>
                {{/each}}
                {{!-- Rows for no results / initial empty state --}}
                <tr id="no-results-row" style="display: none;">
                    <td colspan="7">
                         <div class="empty-state">
                            <i class="fas fa-search"></i> <h5>No rooms found</h5>
                            <p>No rooms match your filter criteria. Try adjusting your filters.</p>
                        </div>
                    </td>
                </tr>
                 <tr id="no-data-row" style="display: {{#if rooms}}none{{else}}table-row{{/if}};">
                    <td colspan="7">
                         <div class="empty-state">
                            <i class="fas fa-door-open"></i> <h5>No rooms added yet</h5>
                            <p>Click "Add New Room" to create the first one.</p>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div class="pagination-container">
        <div class="page-info">
            Showing <span id="showing-start">1</span> to <span id="showing-end">10</span> of <span id="total-items">{{rooms.length}}</span> rooms
        </div>
        <ul class="pagination" id="pagination">
            <!-- Pagination generated by JS -->
        </ul>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete Room <strong id="roomToDeleteNumber"></strong>?</p>
                <p class="text-danger font-weight-bold">Warning: This action cannot be undone. Deletion will fail if the room is associated with schedules, appointments, or test results.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Store all room data rows
        const allRooms = Array.from(document.querySelectorAll('.room-row'));

        // Pagination config
        const itemsPerPage = 10;
        let currentPage = 1;
        let filteredRooms = [...allRooms];

        // DOM elements
        const searchInput = document.getElementById('searchInput');
        const clearSearchBtn = document.getElementById('clearSearchBtn');
        const statusFilter = document.getElementById('statusFilter'); // Get status filter element
        const typeFilter = document.getElementById('typeFilter'); // Get type filter element
        // const specialtyFilter = document.getElementById('specialtyFilter'); // Get specialty filter if added
        const roomTableBody = document.getElementById('room-table-body');
        const noResultsRow = document.getElementById('no-results-row');
        const noDataRow = document.getElementById('no-data-row');
        const pagination = document.getElementById('pagination');
        const showingStart = document.getElementById('showing-start');
        const showingEnd = document.getElementById('showing-end');
        const totalItems = document.getElementById('total-items');

        // --- Alert Function ---
        function showAlert(type, message) {
             const alertContainer = document.querySelector('.patient-list-container');
             if (!alertContainer) return;
             const alertDiv = document.createElement('div');
             alertDiv.className = `alert alert-${type} alert-dismissible fade show mt-3 mx-3`;
             alertDiv.role = 'alert';
             alertDiv.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i> ${message} <button type="button" class="close" data-dismiss="alert">×</button>`;
             const filtersBar = alertContainer.querySelector('.filters-bar');
             alertContainer.insertBefore(alertDiv, filtersBar ? filtersBar.nextSibling : alertContainer.firstChild);
             setTimeout(() => { try { new bootstrap.Alert(alertDiv).close(); } catch(e){ alertDiv.remove(); } }, 5000);
         }

        // --- Filter Function ---
        function applyFilters() {
            const searchTerm = searchInput.value.trim().toLowerCase();
            const statusValue = statusFilter.value.toLowerCase(); // Get selected status
            const typeValue = typeFilter.value.toLowerCase(); // Get selected type
            // const specialtyValue = specialtyFilter.value; // Get selected specialty ID

            filteredRooms = allRooms.filter(row => {
                // Filter by status
                if (statusValue && (row.getAttribute('data-status') || '') !== statusValue) {
                    return false;
                }
                 // Filter by type
                if (typeValue && (row.getAttribute('data-type') || '') !== typeValue) {
                    return false;
                }
                 // Filter by specialty (if filter exists)
                // if (specialtyValue && (row.getAttribute('data-specialty-id') || '') !== specialtyValue) {
                //     return false;
                // }

                // Filter by search term (only if other filters pass)
                if (searchTerm) {
                    const number = row.getAttribute('data-number') || '';
                    const specialtyName = row.getAttribute('data-specialty-name') || '';
                    const description = row.querySelector('.room-description')?.textContent.toLowerCase() || '';
                    // Type and Status are already checked above if selected, but can include here too if needed
                    if (!(number.includes(searchTerm) || specialtyName.includes(searchTerm) || description.includes(searchTerm))) {
                         return false;
                     }
                }

                return true; // Passes all active filters
            });

            currentPage = 1;
            updateDisplay();
        }

        // --- Display Update Function --- (Same as previous)
        function updateDisplay() {
            allRooms.forEach(row => { row.style.display = 'none'; });
            if(noDataRow) noDataRow.style.display = 'none';

            if (filteredRooms.length === 0) {
                noResultsRow.style.display = 'table-row';
                showingStart.textContent='0'; showingEnd.textContent='0'; totalItems.textContent='0';
                pagination.innerHTML = ''; return;
            } else { noResultsRow.style.display = 'none'; }

            const totalFiltered = filteredRooms.length;
            const totalPages = Math.ceil(totalFiltered / itemsPerPage);
            if (currentPage > totalPages) currentPage = totalPages > 0 ? totalPages : 1;
            const start = (currentPage - 1) * itemsPerPage;
            const end = Math.min(start + itemsPerPage, totalFiltered);

            for (let i = start; i < end; i++) { if (filteredRooms[i]) filteredRooms[i].style.display = 'table-row'; }

            showingStart.textContent = totalFiltered ? start + 1 : 0; showingEnd.textContent = end; totalItems.textContent = totalFiltered;
            updatePagination();
        }

        // --- Pagination Update Function --- (Same as previous)
        function updatePagination() {
            const totalPages = Math.ceil(filteredRooms.length / itemsPerPage);
            let paginationHTML = '';
            paginationHTML += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}"><a class="page-link" href="#" data-page="${currentPage - 1}">Previous</a></li>`;
            let startPage = Math.max(1, currentPage - 2), endPage = Math.min(totalPages, currentPage + 2);
            if(totalPages <= 5){ startPage=1; endPage=totalPages; } else if(currentPage<=3){ endPage=5; } else if(currentPage>=totalPages-2){ startPage=totalPages-4; }
            if(startPage>1){ paginationHTML += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`; if(startPage>2) paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`; }
            for(let i=startPage; i<=endPage; i++){ paginationHTML += `<li class="page-item ${i===currentPage?'active':''}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`; }
            if(endPage<totalPages){ if(endPage<totalPages-1) paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`; paginationHTML += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`; }
            paginationHTML += `<li class="page-item ${currentPage===totalPages||totalPages===0?'disabled':''}"><a class="page-link" href="#" data-page="${currentPage + 1}">Next</a></li>`;
            pagination.innerHTML = paginationHTML;

            document.querySelectorAll('.pagination .page-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault(); const pageNum = this.getAttribute('data-page');
                    if (!this.parentElement.classList.contains('disabled') && pageNum) { currentPage = parseInt(pageNum); updateDisplay(); }
                });
            });
        }

        // --- Event Listeners ---
        let searchTimeout;
        searchInput.addEventListener('input', () => { clearTimeout(searchTimeout); searchTimeout = setTimeout(applyFilters, 300); });
        clearSearchBtn.addEventListener('click', (e) => { e.preventDefault(); searchInput.value = ''; applyFilters(); });
        statusFilter.addEventListener('change', applyFilters); // Add listener for status filter
        typeFilter.addEventListener('change', applyFilters); // Add listener for type filter
        // specialtyFilter?.addEventListener('change', applyFilters); // Add listener if specialty filter exists

        // --- Delete Functionality ---
        let roomIdToDelete = null;
        const confirmDeleteBtn = document.getElementById('confirmDelete');
        const deleteModal = $('#deleteModal');

         document.querySelectorAll('.delete-room').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                roomIdToDelete = this.getAttribute('data-id');
                document.getElementById('roomToDeleteNumber').textContent = this.getAttribute('data-number');
                deleteModal.modal('show');
            });
        });

        confirmDeleteBtn.addEventListener('click', function() {
            if (roomIdToDelete) {
                confirmDeleteBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Deleting...'; confirmDeleteBtn.disabled = true;
                fetch(`/admin/manage_room/delete/${roomIdToDelete}`, { method: 'DELETE', headers: { 'Content-Type': 'application/json' } })
                .then(response => response.json().then(data => ({ status: response.status, body: data })))
                .then(({ status, body }) => {
                     deleteModal.modal('hide'); confirmDeleteBtn.innerHTML = 'Delete'; confirmDeleteBtn.disabled = false;
                    if (body.success) {
                        const indexInAll = allRooms.findIndex(row => row.getAttribute('data-id') === roomIdToDelete);
                        if (indexInAll > -1) allRooms.splice(indexInAll, 1);
                        applyFilters(); // Refresh view after removing from source array
                        showAlert('success', body.message || 'Room deleted successfully.');
                    } else {
                        showAlert('danger', body.message || 'Failed to delete room.');
                    }
                     roomIdToDelete = null;
                })
                .catch(error => {
                    console.error('Error deleting room:', error); deleteModal.modal('hide'); confirmDeleteBtn.innerHTML = 'Delete'; confirmDeleteBtn.disabled = false;
                    showAlert('danger', 'An unexpected error occurred.'); roomIdToDelete = null;
                });
            }
        });

        // --- Initial Display ---
        updateDisplay();
         if(noDataRow) noDataRow.style.display = (allRooms.length === 0) ? 'table-row' : 'none';

    });
</script>