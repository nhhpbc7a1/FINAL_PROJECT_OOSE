<!-- Edit Doctor Form -->
<link rel="stylesheet" href="/public/css/admin-side/add-doctor.css"> <!-- Reusing the same CSS -->

<div class="content-header">
    <div>
        <!-- Changed Title/Subtitle -->
        <h1 class="page-title">{{pageTitle}}</h1>
        <p class="page-subtitle">Update the doctor's information using the form below.</p>
    </div>
    <div class="header-actions">
        <a href="/admin/manage_doctor" class="btn btn-outline">
            <i class="fas fa-arrow-left"></i> Back to Doctors
        </a>
    </div>
</div>

{{#if error}}
<div class="alert alert-danger">
    <i class="fas fa-exclamation-circle"></i>
    <span>{{error}}</span>
    <button type="button" class="close" data-dismiss="alert">×</button>
</div>
{{/if}}

{{#if success}} <!-- Optional: Add success message display -->
<div class="alert alert-success">
    <i class="fas fa-check-circle"></i>
    <span>{{success}}</span>
    <button type="button" class="close" data-dismiss="alert">×</button>
</div>
{{/if}}


<div class="card form-card">
    <div class="card-body">
        <!-- Form Action using doctorId -->
        <form id="doctorForm" action="/admin/manage_doctor/update/{{doctor.doctorId}}" method="POST" enctype="multipart/form-data">
            <!-- Hidden input for userId to ensure it's available for the update -->
            <input type="hidden" name="userId" value="{{doctor.userId}}">
            <!-- Optional: Add hidden input for PUT/PATCH if your framework needs it -->
            <!-- <input type="hidden" name="_method" value="PUT"> -->

            <div class="row">
                <div class="col-md-9">
                    <!-- Basic Information Section -->
                    <div class="form-section">
                        <h3 class="section-title">Basic Information</h3>

                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="fullName">Full Name <span class="required">*</span></label>
                                <!-- Value pre-filled by Handlebars -->
                                <input type="text" class="form-control" id="fullName" name="fullName" value="{{doctor.fullName}}" required>
                                <small class="form-text text-muted">Enter the doctor's full name as it appears on official documents.</small>
                            </div>

                            <div class="form-group col-md-6">
                                <label for="email">Email Address <span class="required">*</span></label>
                                <!-- Value pre-filled by Handlebars -->
                                <input type="email" class="form-control" id="email" name="email" value="{{doctor.email}}" required>
                                <small class="form-text text-muted">This email will be used for login and notifications.</small>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="phoneNumber">Phone Number <span class="required">*</span></label>
                                <!-- Value pre-filled by Handlebars -->
                                <input type="tel" class="form-control" id="phoneNumber" name="phoneNumber" value="{{doctor.phoneNumber}}" required>
                                <small class="form-text text-muted">Format: +1 (123) 456-7890</small>
                            </div>

                            <div class="form-group col-md-6">
                                <label for="address">Address</label>
                                <!-- Value pre-filled by Handlebars -->
                                <input type="text" class="form-control" id="address" name="address" value="{{doctor.address}}">
                                <small class="form-text text-muted">Complete street address</small>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-4">
                                <label for="gender">Gender</label>
                                <select class="form-control" id="gender" name="gender">
                                    <!-- Selected option handled by Handlebars 'eq' helper -->
                                    <option value="" disabled {{#unless doctor.gender}}selected{{/unless}}>Select Gender</option>
                                    <option value="Male" {{#if (eq doctor.gender "Male")}}selected{{/if}}>Male</option>
                                    <option value="Female" {{#if (eq doctor.gender "Female")}}selected{{/if}}>Female</option>
                                    <option value="Other" {{#if (eq doctor.gender "Other")}}selected{{/if}}>Other</option>
                                </select>
                            </div>

                            <div class="form-group col-md-4">
                                <label for="dob">Date of Birth</label>
                                <!-- Value pre-filled by Handlebars - Ensure YYYY-MM-DD format from backend -->
                                <input type="date" class="form-control" id="dob" name="dob" value="{{doctor.dob}}">
                                
                            </div>

                            <div class="form-group col-md-4">
                                <label for="specialty">Specialty <span class="required">*</span></label>
                                <select class="form-control" id="specialty" name="specialty" required>
                                    <!-- Selected option handled by Handlebars 'eq' helper -->
                                    <option value="" disabled {{#unless doctor.specialty}}selected{{/unless}}>Select Specialty</option>
                                    {{#each specialties}}
                                    <option value="{{specialtyId}}" {{#if (eq ../doctor.specialty specialtyId)}}selected{{/if}}>{{name}}</option>
                                    {{/each}}
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Professional Information -->
                    <div class="form-section">
                        <h3 class="section-title">Professional Information</h3>

                        <div class="form-row">
                            <div class="form-group col-md-4">
                                <label for="experience">Experience (years) <span class="required">*</span></label>
                                <!-- Value pre-filled by Handlebars -->
                                <input type="number" class="form-control" id="experience" name="experience" min="0" max="70" value="{{doctor.experience}}" required>
                            </div>

                            <div class="form-group col-md-4">
                                <label for="education">Education <span class="required">*</span></label>
                                <!-- Value pre-filled by Handlebars -->
                                <input type="text" class="form-control" id="education" name="education" value="{{doctor.education}}" required>
                                <small class="form-text text-muted">E.g., MD, MBBS, PhD</small>
                            </div>

                            <div class="form-group col-md-4">
                                <label for="licenseNumber">License Number <span class="required">*</span></label>
                                <!-- Value pre-filled by Handlebars -->
                                <input type="text" class="form-control" id="licenseNumber" name="licenseNumber" value="{{doctor.licenseNumber}}" required>
                                <small class="form-text text-muted">Medical license/registration number</small>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="certifications">Certifications</label>
                            <!-- Value pre-filled by Handlebars -->
                            <textarea class="form-control" id="certifications" name="certifications" rows="2">{{doctor.certifications}}</textarea>
                            <small class="form-text text-muted">List of professional certifications, separated by commas.</small>
                        </div>

                        <div class="form-group">
                            <label for="bio">Professional Biography</label>
                            <!-- Value pre-filled by Handlebars -->
                            <textarea class="form-control" id="bio" name="bio" rows="4">{{doctor.bio}}</textarea>
                            <small class="form-text text-muted">A brief professional summary to be displayed on the doctor's profile.</small>
                        </div>
                    </div>
                </div>

                <div class="col-md-3">
                    <!-- Profile Photo Upload -->
                    <div class="form-section">
                        <h3 class="section-title">Profile Photo</h3>
                        <div class="profile-photo-upload">
                            <!-- Display existing photo if available -->
                            <div class="photo-preview {{#if doctor.profilePictureUrl}}has-image{{/if}}" id="photoPreview"
                                 {{#if doctor.profilePictureUrl}}style="background-image: url('{{doctor.profilePictureUrl}}');"{{/if}}>
                                {{#unless doctor.profilePictureUrl}}
                                    <i class="fas fa-user-md"></i>
                                    <span>Update Photo</span>
                                {{/unless}}
                            </div>
                            <!-- Debug info - remove after fixing -->
                            <div class="mt-2">
                                <small class="text-muted">Image path: {{doctor.profilePictureUrl}}</small>
                                {{#if doctor.profilePictureUrl}}
                                <div class="mt-1">
                                    <img src="{{doctor.profilePictureUrl}}" alt="Profile" style="width: 50px; height: 50px; object-fit: cover;" class="border">
                                </div>
                                {{/if}}
                            </div>
                            <input type="file" id="profilePhoto" name="profilePhoto" accept="image/*" class="profile-photo-input">
                            <button type="button" class="btn btn-outline-primary btn-sm btn-block mt-2" id="uploadPhotoBtn">
                                <i class="fas fa-upload"></i> Choose New Photo
                            </button>
                            <small class="form-text text-muted">
                                Upload a new photo to replace the current one. Recommended: Square, 300x300px+.
                            </small>
                        </div>
                    </div>

                    <!-- Account Settings -->
                    <div class="form-section">
                        <h3 class="section-title">Account Settings</h3>
                        <div class="form-group">
                            <label for="accountStatus">Status</label>
                            <select class="form-control" id="accountStatus" name="accountStatus">
                                <!-- Added selected logic -->
                                <option value="active" {{#if (eq doctor.accountStatus "active")}}selected{{/if}}>Active</option>
                                <option value="inactive" {{#if (eq doctor.accountStatus "inactive")}}selected{{/if}}>Inactive</option>
                                <!-- Add other statuses if applicable -->
                                <!-- <option value="pending" {{#if (eq doctor.accountStatus "pending")}}selected{{/if}}>Pending</option> -->
                                <!-- <option value="suspended" {{#if (eq doctor.accountStatus "suspended")}}selected{{/if}}>Suspended</option> -->
                            </select>
                            <small class="form-text text-muted">
                                Set the doctor's account status. Inactive accounts cannot log in.
                            </small>
                        </div>

                        <!-- Removed "Send Credentials" checkbox -->

                    </div>
                </div>
            </div>

            <div class="form-actions">
                <button type="button" class="btn btn-outline-secondary" onclick="location.href='/admin/manage_doctor'">
                    Cancel
                </button>
                <!-- Changed Button Text -->
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Save Changes
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Debug and fix date of birth field
        const dobInput = document.getElementById('dob');
        if (dobInput) {
            console.log("Current dob input value:", dobInput.value);

            // If the date is empty but we have a raw value in the small tag, try to parse and set it
            if (!dobInput.value) {
                const dobDebugElement = dobInput.nextElementSibling;
                if (dobDebugElement && dobDebugElement.tagName === 'SMALL') {
                    // Extract both date values from the debug element
                    const debugText = dobDebugElement.textContent;
                    console.log("Debug text:", debugText);

                    // Try to find the original dateOfBirth value
                    const originalDateMatch = debugText.match(/Original dateOfBirth: (.+?)($|\s|<)/);
                    const rawDobMatch = debugText.match(/Raw dob value: (.+?)($|\s|<|Original)/);

                    let dateToUse = null;

                    // First try the original date
                    if (originalDateMatch && originalDateMatch[1]) {
                        console.log("Found original date:", originalDateMatch[1]);
                        try {
                            const originalDate = new Date(originalDateMatch[1]);
                            if (!isNaN(originalDate)) {
                                dateToUse = originalDate;
                            }
                        } catch (e) {
                            console.error("Error parsing original date:", e);
                        }
                    }

                    // If that didn't work, try the raw dob value
                    if (!dateToUse && rawDobMatch && rawDobMatch[1]) {
                        console.log("Found raw dob:", rawDobMatch[1]);
                        try {
                            const rawDate = new Date(rawDobMatch[1]);
                            if (!isNaN(rawDate)) {
                                dateToUse = rawDate;
                            }
                        } catch (e) {
                            console.error("Error parsing raw dob:", e);
                        }
                    }

                    // If we found a valid date, format and set it
                    if (dateToUse) {
                        // Format as YYYY-MM-DD
                        const formattedDate = dateToUse.toISOString().split('T')[0];
                        console.log("Setting date input to:", formattedDate);
                        dobInput.value = formattedDate;
                    }
                }
            }
        }

        // Profile photo upload preview (Handles NEW uploads)
        const profilePhotoInput = document.getElementById('profilePhoto');
        const photoPreview = document.getElementById('photoPreview');
        const uploadPhotoBtn = document.getElementById('uploadPhotoBtn');

        // Ensure the image is properly loaded
        if (photoPreview.style.backgroundImage) {
            // Force reload the image by appending a cache-busting parameter
            let bgImage = photoPreview.style.backgroundImage;
            console.log("Current background image:", bgImage);
            if (bgImage.includes('url(')) {
                let url = bgImage.replace(/^url\(['"](.+)['"]\)$/, '$1');
                console.log("Extracted URL:", url);
                if (!url.includes('?')) {
                    url = url + '?t=' + new Date().getTime();
                    photoPreview.style.backgroundImage = `url('${url}')`;
                    console.log("Updated background image with cache busting:", photoPreview.style.backgroundImage);
                }
            }
        } else {
            console.log("No background image found on photoPreview element");
        }

        uploadPhotoBtn.addEventListener('click', function() {
            profilePhotoInput.click();
        });

        profilePhotoInput.addEventListener('change', function() {
            if (this.files && this.files[0]) {
                const reader = new FileReader();

                reader.onload = function(e) {
                    // Update preview with the NEW image selected by the user
                    photoPreview.innerHTML = ''; // Clear any potential icon/text
                    photoPreview.style.backgroundImage = `url('${e.target.result}')`;
                    photoPreview.classList.add('has-image');
                }

                reader.readAsDataURL(this.files[0]);
            }
        });

        // Form validation (Mostly unchanged from add-doctor)
        const doctorForm = document.getElementById('doctorForm');

        doctorForm.addEventListener('submit', function(event) {
            if (!doctorForm.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();

                // Highlight all invalid fields
                const invalidFields = doctorForm.querySelectorAll(':invalid');
                invalidFields.forEach(field => {
                    // Add error class to the form-group for better styling potential
                    let formGroup = field.closest('.form-group');
                    if (formGroup) {
                         formGroup.classList.add('has-error');
                    }
                    // Fallback if no form-group found
                    else {
                        field.classList.add('is-invalid');
                    }
                });

                // Scroll to first invalid field
                if (invalidFields.length > 0) {
                    invalidFields[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
                    invalidFields[0].focus();
                }
                 // Add Bootstrap's validation class *after* custom handling
                 // Or handle styling purely with 'has-error'
                 // doctorForm.classList.add('was-validated'); // Be careful if using Bootstrap's default styles alongside custom ones
            } else {
                 // Optional: Add a loading indicator on successful submission
                 const submitButton = doctorForm.querySelector('button[type="submit"]');
                 if(submitButton) {
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
                 }
            }


        });

        // Remove error class when field is corrected
        doctorForm.querySelectorAll('input, select, textarea').forEach(field => {
            field.addEventListener('input', function() {
                if (this.checkValidity()) {
                     let formGroup = this.closest('.form-group');
                     if (formGroup) {
                         formGroup.classList.remove('has-error');
                     }
                     this.classList.remove('is-invalid'); // For fallback/Bootstrap
                }
            });
             // Also remove error on change for select elements
            if (field.tagName === 'SELECT') {
                field.addEventListener('change', function() {
                     if (this.checkValidity()) {
                         let formGroup = this.closest('.form-group');
                         if (formGroup) {
                             formGroup.classList.remove('has-error');
                         }
                         this.classList.remove('is-invalid');
                    }
                });
            }
        });

         // Clear alert messages on close
        document.querySelectorAll('.alert .close').forEach(button => {
            button.addEventListener('click', function() {
                this.closest('.alert').remove();
            });
        });
    });
</script>
