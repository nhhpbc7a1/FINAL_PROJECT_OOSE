<link rel="stylesheet" href="/public/css/admin-side/add-doctor.css"> {{!-- Reuse form styling --}}

<div class="content-header">
    <div>
        <h1 class="page-title">{{pageTitle}}</h1>
        <p class="page-subtitle">Add a new service or test by filling out the form below.</p>
    </div>
    <div class="header-actions">
        <a href="/admin/manage_service" class="btn btn-outline">
            <i class="fas fa-arrow-left"></i> Back to Services
        </a>
    </div>
</div>

{{#if error}}
<div class="alert alert-danger alert-dismissible fade show">
    <i class="fas fa-exclamation-circle"></i> <span>{{error}}</span>
    <button type="button" class="close" data-dismiss="alert">×</button>
</div>
{{/if}}
{{#if flashMessage}}
<div class="alert alert-{{flashMessage.type}} alert-dismissible fade show">
     <i class="fas fa-{{#if (eq flashMessage.type 'success')}}check-circle{{else}}exclamation-circle{{/if}}"></i>
    <span>{{flashMessage.message}}</span>
    <button type="button" class="close" data-dismiss="alert">×</button>
</div>
{{/if}}

<div class="card form-card">
    <div class="card-body">
        <form id="serviceForm" action="/admin/manage_service/add" method="POST" novalidate>
            <div class="form-section">
                 <h3 class="section-title">Service Details</h3>

                 <div class="form-group">
                    <label for="name">Service/Test Name <span class="required">*</span></label>
                    <input type="text" class="form-control" id="name" name="name" value="{{service.name}}" required aria-describedby="name-feedback">
                    <small class="form-text text-muted">The name of the medical service or lab test.</small>
                    <div id="name-feedback"></div>
                    <div class="invalid-feedback">Please enter the service/test name.</div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-4">
                        <label for="type">Type <span class="required">*</span></label>
                        <select class="form-control" id="type" name="type" required>
                            <option value="" disabled {{#unless service.type}}selected{{/unless}}>Select Type</option>
                            <option value="service" {{#if (eq service.type "service")}}selected{{/if}}>Service</option>
                            <option value="test" {{#if (eq service.type "test")}}selected{{/if}}>Test</option>
                        </select>
                        <div class="invalid-feedback">Please select the type.</div>
                    </div>
                    <div class="form-group col-md-4">
                        <label for="price">Price <span class="required">*</span></label>
                        <div class="input-group">
                            <div class="input-group-prepend"><span class="input-group-text">$</span></div>
                            <input type="number" step="0.01" min="0" class="form-control" id="price" name="price" value="{{service.price}}" required>
                             <div class="invalid-feedback">Please enter a valid, non-negative price.</div>
                        </div>
                    </div>
                     <div class="form-group col-md-4">
                        <label for="duration">Duration (minutes)</label>
                        <input type="number" min="0" class="form-control" id="duration" name="duration" value="{{service.duration}}">
                        <small class="form-text text-muted">Estimated time in minutes (optional).</small>
                         <div class="invalid-feedback">Duration must be a non-negative number.</div>
                    </div>
                </div>

                 <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="category">Category</label>
                        <input type="text" class="form-control" id="category" name="category" value="{{service.category}}">
                        <small class="form-text text-muted">E.g., "Consultation", "Radiology", "Blood Test", "Surgery".</small>
                    </div>
                    <div class="form-group col-md-6">
                        <label for="specialtyId">Related Specialty</label>
                        <select class="form-control" id="specialtyId" name="specialtyId">
                            <option value="" selected>-- General / None --</option>
                            {{#each specialties}}
                            <option value="{{specialtyId}}" {{#if (eq ../service.specialtyId specialtyId)}}selected{{/if}}>{{name}}</option>
                            {{/each}}
                        </select>
                         <small class="form-text text-muted">Assign to a specialty if applicable.</small>
                    </div>
                </div>

                 <div class="form-group">
                    <label for="description">Description</label>
                    <textarea class="form-control" id="description" name="description" rows="3">{{service.description}}</textarea>
                    <small class="form-text text-muted">Details about the service or test (optional).</small>
                </div>

                 <div class="form-group">
                     <label for="status">Status</label>
                     <select class="form-control" id="status" name="status">
                         <option value="active" selected>Active</option>
                         <option value="inactive">Inactive</option>
                     </select>
                      <small class="form-text text-muted">Inactive services cannot be selected for appointments.</small>
                 </div>
             </div>


            <div class="form-actions">
                <button type="button" class="btn btn-outline-secondary" onclick="location.href='/admin/manage_service'">
                    Cancel
                </button>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Save Service
                </button>
            </div>
        </form>
    </div>
</div>

<script>
     // --- Client-side validation (Name uniqueness, standard validation) ---
     document.addEventListener('DOMContentLoaded', function() {
         const serviceForm = document.getElementById('serviceForm');
         const nameInput = document.getElementById('name');
         const nameFeedbackEl = document.getElementById('name-feedback');
         const priceInput = document.getElementById('price');
         const durationInput = document.getElementById('duration');

         let isNameAvailable = false;
         let nameCheckTimeout = null;

         const checkNameAvailability = async () => {
             // (Same AJAX name check logic as add_medication.hbs, using the correct API path)
             const name = nameInput.value.trim();
             nameFeedbackEl.innerHTML = ''; nameInput.classList.remove('is-invalid', 'is-valid');
             if (!name) { isNameAvailable = false; return; }
             nameFeedbackEl.innerHTML = '<small class="text-muted">Checking name...</small>';
             try {
                 const response = await fetch(`/admin/manage_service/api/check-name?name=${encodeURIComponent(name)}`); // API path for services
                 const data = await response.json();
                 if (response.ok) {
                     if (data.isUnique) { nameFeedbackEl.innerHTML = '<small class="text-success">Name is available!</small>'; nameInput.classList.add('is-valid'); isNameAvailable = true; }
                     else { nameFeedbackEl.innerHTML = '<small class="text-danger">This service/test name already exists.</small>'; nameInput.classList.add('is-invalid'); isNameAvailable = false; }
                 } else { nameFeedbackEl.innerHTML = '<small class="text-warning">Could not verify name uniqueness.</small>'; isNameAvailable = true; }
             } catch (error) { nameFeedbackEl.innerHTML = '<small class="text-warning">Network error checking name.</small>'; isNameAvailable = true; }
         };

         nameInput.addEventListener('blur', checkNameAvailability);
         nameInput.addEventListener('input', () => { clearTimeout(nameCheckTimeout); nameInput.classList.remove('is-invalid', 'is-valid'); nameFeedbackEl.innerHTML = ''; isNameAvailable = false; nameCheckTimeout = setTimeout(checkNameAvailability, 1000); });

         // Form Submission
         serviceForm.addEventListener('submit', async function(event) {
             event.preventDefault(); event.stopPropagation();
             await checkNameAvailability();

             // Basic price/duration check
             const priceValue = parseFloat(priceInput.value);
             let isPriceValid = !isNaN(priceValue) && priceValue >= 0;
             if (!isPriceValid) priceInput.classList.add('is-invalid'); else priceInput.classList.remove('is-invalid');

             const durationValue = durationInput.value ? parseInt(durationInput.value, 10) : null;
             let isDurationValid = durationValue === null || (!isNaN(durationValue) && durationValue >= 0);
             if (!isDurationValid) durationInput.classList.add('is-invalid'); else durationInput.classList.remove('is-invalid');


             const isFormValid = serviceForm.checkValidity();
             serviceForm.classList.add('was-validated');

             if (isFormValid && isNameAvailable && isPriceValid && isDurationValid) {
                 console.log('Form is valid, submitting...');
                 const submitButton = serviceForm.querySelector('button[type="submit"]');
                 if(submitButton){ submitButton.disabled = true; submitButton.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Saving...'; }
                 serviceForm.submit();
             } else {
                 console.log('Form validation failed.');
                 let firstInvalidField = serviceForm.querySelector(':invalid');
                  if (!isNameAvailable && (!firstInvalidField || firstInvalidField !== nameInput)) { firstInvalidField = nameInput; }
                  if (!isPriceValid && (!firstInvalidField || firstInvalidField !== priceInput)) { firstInvalidField = priceInput; }
                  if (!isDurationValid && (!firstInvalidField || firstInvalidField !== durationInput)) { firstInvalidField = durationInput; }

                 if (firstInvalidField) { firstInvalidField.scrollIntoView({ behavior: 'smooth', block: 'center' }); firstInvalidField.focus({ preventScroll: true }); }
             }
         });

         // Real-time feedback remove for price/duration
         priceInput.addEventListener('input', function() { const v = parseFloat(this.value); if (!isNaN(v) && v >= 0) this.classList.remove('is-invalid'); });
         durationInput.addEventListener('input', function() { const v = this.value ? parseInt(this.value, 10) : null; if (v === null || (!isNaN(v) && v >= 0)) this.classList.remove('is-invalid'); });

     });
</script>