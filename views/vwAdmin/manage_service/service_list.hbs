<link rel="stylesheet" href="/public/css/admin-side/doctor-list.css"> {{!-- Reuse list styling --}}

<div class="patient-list-container"> {{!-- Container class --}}
    <div class="filters-bar">
        {{!-- Search Input (Client-side filtering) --}}
        <div class="search-box flex-grow-1 mr-2">
            <input type="text" class="form-control form-control-sm" id="searchInput" placeholder="Search by name, type, category, specialty..." value="">
            <i class="fas fa-search"></i>
        </div>
        <a href="#" class="btn btn-sm btn-secondary" id="clearSearchBtn" title="Clear Search"><i class="fas fa-times"></i></a>

        {{!-- Add other filters (dropdowns) if needed --}}
         {{!-- Example:
         <select class="form-control form-control-sm ml-2" id="typeFilter">
             <option value="">All Types</option>
             <option value="service">Service</option>
             <option value="test">Test</option>
         </select>
         <select class="form-control form-control-sm ml-2" id="statusFilter">
             <option value="">All Status</option>
             <option value="active">Active</option>
             <option value="inactive">Inactive</option>
         </select>
         --}}

        <a href="/admin/manage_service/add" class="add-new-btn ml-auto">
            <i class="fas fa-plus"></i> Add New Service
        </a>
    </div>

    {{#if flashMessage}}
    <div class="alert alert-{{flashMessage.type}} alert-dismissible fade show mt-3 mx-3" role="alert">
         <i class="fas fa-{{#if (eq flashMessage.type 'success')}}check-circle{{else}}exclamation-circle{{/if}}"></i>
        {{flashMessage.message}}
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">×</span>
        </button>
    </div>
    {{/if}}

    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Type</th>
                    <th scope="col">Category</th>
                    <th scope="col">Specialty</th>
                    <th scope="col">Price</th>
                    <th scope="col">Duration</th>
                    <th scope="col">Status</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody id="service-table-body">
                {{#each services}}
                <tr class="service-row"
                    data-id="{{serviceId}}"
                    data-name="{{toLowerCase name}}"
                    data-type="{{toLowerCase type}}"
                    data-category="{{toLowerCase category}}"
                    data-specialty-name="{{toLowerCase specialtyName}}"
                    data-status="{{toLowerCase status}}"
                >
                    <td>{{name}}</td>
                    <td>{{toUpperCase type}}</td>
                    <td>{{#if category}}{{category}}{{else}}<span class="text-muted">N/A</span>{{/if}}</td>
                    <td>{{#if specialtyName}}{{specialtyName}}{{else}}<span class="text-muted">General</span>{{/if}}</td>
                    <td>${{format_price price}}</td>
                    <td>{{#if duration}}{{duration}} min{{else}}<span class="text-muted">N/A</span>{{/if}}</td>
                    <td>
                        <span class="status-badge status-{{toLowerCase status}}">{{status}}</span>
                    </td>
                    <td>
                        <div class="action-buttons">
                            <a href="/admin/manage_service/edit/{{serviceId}}" class="btn btn-icon" title="Edit Service">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a href="#" class="btn btn-icon delete-service" title="Delete Service" data-toggle="modal" data-target="#deleteModal" data-id="{{serviceId}}" data-name="{{name}}">
                                <i class="fas fa-trash-alt text-danger"></i>
                            </a>
                        </div>
                    </td>
                </tr>
                {{/each}}
                {{!-- Rows for no results / initial empty state --}}
                <tr id="no-results-row" style="display: none;">
                    <td colspan="8">
                         <div class="empty-state">
                            <i class="fas fa-search"></i>
                            <h5>No services found</h5>
                            <p>No services match your search criteria. Try adjusting your search.</p>
                        </div>
                    </td>
                </tr>
                 <tr id="no-data-row" style="display: {{#if services}}none{{else}}table-row{{/if}};">
                    <td colspan="8">
                         <div class="empty-state">
                            <i class="fas fa-stethoscope"></i>
                            <h5>No services added yet</h5>
                            <p>Click "Add New Service" to create the first one.</p>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
     <!-- Pagination -->
    <div class="pagination-container">
        <div class="page-info">
            Showing <span id="showing-start">1</span> to <span id="showing-end">10</span> of <span id="total-items">{{services.length}}</span> services
        </div>
        <ul class="pagination" id="pagination">
            <!-- Pagination will be generated by JavaScript -->
        </ul>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the service <strong id="serviceToDeleteName"></strong>?</p>
                <p class="text-danger font-weight-bold">Warning: This action cannot be undone. Deletion will fail if the service is associated with appointments or test results.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

{{#if error}}
<div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
    {{error}}
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">×</span>
    </button>
</div>
{{/if}}

{{!-- Add Handlebars helper for formatCurrency if needed --}}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Store all service data rows
        const allServices = Array.from(document.querySelectorAll('.service-row'));

        // Pagination config
        const itemsPerPage = 10;
        let currentPage = 1;
        let filteredServices = [...allServices];

        // DOM elements
        const searchInput = document.getElementById('searchInput');
        const clearSearchBtn = document.getElementById('clearSearchBtn');
        // const typeFilter = document.getElementById('typeFilter'); // Example filter
        // const statusFilter = document.getElementById('statusFilter'); // Example filter
        const serviceTableBody = document.getElementById('service-table-body');
        const noResultsRow = document.getElementById('no-results-row');
        const noDataRow = document.getElementById('no-data-row');
        const pagination = document.getElementById('pagination');
        const showingStart = document.getElementById('showing-start');
        const showingEnd = document.getElementById('showing-end');
        const totalItems = document.getElementById('total-items');

        // --- Alert Function --- (Same as previous examples)
        function showAlert(type, message) {
             const alertContainer = document.querySelector('.patient-list-container');
             if (!alertContainer) return;
             const alertDiv = document.createElement('div');
             alertDiv.className = `alert alert-${type} alert-dismissible fade show mt-3 mx-3`;
             alertDiv.role = 'alert';
             alertDiv.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i> ${message} <button type="button" class="close" data-dismiss="alert">×</button>`;
             const filtersBar = alertContainer.querySelector('.filters-bar');
             alertContainer.insertBefore(alertDiv, filtersBar ? filtersBar.nextSibling : alertContainer.firstChild);
             setTimeout(() => { try { new bootstrap.Alert(alertDiv).close(); } catch(e){ alertDiv.remove(); } }, 5000);
         }

        // --- Filter Function ---
        function applyFilters() {
            const searchTerm = searchInput.value.trim().toLowerCase();
            // const typeValue = typeFilter ? typeFilter.value.toLowerCase() : ''; // Example
            // const statusValue = statusFilter ? statusFilter.value.toLowerCase() : ''; // Example

            filteredServices = allServices.filter(row => {
                // Filter by search term
                if (searchTerm) {
                    const name = row.getAttribute('data-name') || '';
                    const type = row.getAttribute('data-type') || '';
                    const category = row.getAttribute('data-category') || '';
                    const specialty = row.getAttribute('data-specialty-name') || '';
                    if (!(name.includes(searchTerm) || type.includes(searchTerm) || category.includes(searchTerm) || specialty.includes(searchTerm))) {
                        return false;
                    }
                }
                 // Filter by type (example)
                // if (typeValue && (row.getAttribute('data-type') || '') !== typeValue) {
                //     return false;
                // }
                 // Filter by status (example)
                // if (statusValue && (row.getAttribute('data-status') || '') !== statusValue) {
                //    return false;
                // }

                return true; // Passes all active filters
            });

            currentPage = 1;
            updateDisplay();
        }

        // --- Display Update Function --- (Adapated from medication list)
        function updateDisplay() {
            allServices.forEach(row => { row.style.display = 'none'; });
             if(noDataRow) noDataRow.style.display = 'none';

            if (filteredServices.length === 0) {
                noResultsRow.style.display = 'table-row';
                showingStart.textContent = '0'; showingEnd.textContent = '0'; totalItems.textContent = '0';
                pagination.innerHTML = ''; return;
            } else {
                noResultsRow.style.display = 'none';
            }

            const totalFilteredItems = filteredServices.length;
            const totalPages = Math.ceil(totalFilteredItems / itemsPerPage);
            if (currentPage > totalPages) currentPage = totalPages > 0 ? totalPages : 1;

            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, totalFilteredItems);

            for (let i = startIndex; i < endIndex; i++) {
                if (filteredServices[i]) filteredServices[i].style.display = 'table-row';
            }

            showingStart.textContent = totalFilteredItems ? startIndex + 1 : 0;
            showingEnd.textContent = endIndex;
            totalItems.textContent = totalFilteredItems;

            updatePagination();
        }

        // --- Pagination Update Function --- (Same logic as medication list)
        function updatePagination() {
            const totalPages = Math.ceil(filteredServices.length / itemsPerPage);
            let paginationHTML = '';
             paginationHTML += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}"><a class="page-link" href="#" data-page="${currentPage - 1}">Previous</a></li>`;
             let startPage = Math.max(1, currentPage - 2), endPage = Math.min(totalPages, currentPage + 2);
             // Adjust range for display consistency
             if(totalPages <= 5) { startPage = 1; endPage = totalPages; } else if (currentPage <= 3) { endPage = 5; } else if (currentPage >= totalPages - 2) { startPage = totalPages - 4; }
             if (startPage > 1) { paginationHTML += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`; if (startPage > 2) paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`; }
             for (let i = startPage; i <= endPage; i++) { paginationHTML += `<li class="page-item ${i === currentPage ? 'active' : ''}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`; }
             if (endPage < totalPages) { if (endPage < totalPages - 1) paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`; paginationHTML += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`; }
             paginationHTML += `<li class="page-item ${currentPage === totalPages || totalPages === 0 ? 'disabled' : ''}"><a class="page-link" href="#" data-page="${currentPage + 1}">Next</a></li>`;
            pagination.innerHTML = paginationHTML;

            document.querySelectorAll('.pagination .page-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault(); const pageNum = this.getAttribute('data-page');
                    if (!this.parentElement.classList.contains('disabled') && pageNum) { currentPage = parseInt(pageNum); updateDisplay(); }
                });
            });
        }

        // --- Event Listeners ---
        // Real-time search
        let searchTimeout;
        searchInput.addEventListener('input', () => { clearTimeout(searchTimeout); searchTimeout = setTimeout(applyFilters, 300); });
        clearSearchBtn.addEventListener('click', (e) => { e.preventDefault(); searchInput.value = ''; applyFilters(); });
        // Add listeners for other filters if implemented
        // typeFilter?.addEventListener('change', applyFilters);
        // statusFilter?.addEventListener('change', applyFilters);


        // --- Delete Functionality ---
        let serviceIdToDelete = null;
        const confirmDeleteBtn = document.getElementById('confirmDelete');
        const deleteModal = $('#deleteModal');

         document.querySelectorAll('.delete-service').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                serviceIdToDelete = this.getAttribute('data-id');
                const serviceName = this.getAttribute('data-name');
                document.getElementById('serviceToDeleteName').textContent = serviceName;
                deleteModal.modal('show');
            });
        });

        confirmDeleteBtn.addEventListener('click', function() {
            if (serviceIdToDelete) {
                confirmDeleteBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Deleting...'; confirmDeleteBtn.disabled = true;
                fetch(`/admin/manage_service/delete/${serviceIdToDelete}`, { method: 'DELETE', headers: { 'Content-Type': 'application/json' } })
                .then(response => response.json().then(data => ({ status: response.status, body: data })))
                .then(({ status, body }) => {
                     deleteModal.modal('hide'); confirmDeleteBtn.innerHTML = 'Delete'; confirmDeleteBtn.disabled = false;
                    if (body.success) {
                        const indexInAll = allServices.findIndex(row => row.getAttribute('data-id') === serviceIdToDelete);
                         if (indexInAll > -1) allServices.splice(indexInAll, 1);
                        applyFilters(); // Re-run filters and update display
                        showAlert('success', body.message || 'Service deleted successfully.');
                    } else {
                        showAlert('danger', body.message || 'Failed to delete service.');
                    }
                     serviceIdToDelete = null;
                })
                .catch(error => {
                    console.error('Error deleting service:', error); deleteModal.modal('hide'); confirmDeleteBtn.innerHTML = 'Delete'; confirmDeleteBtn.disabled = false;
                    showAlert('danger', 'An unexpected error occurred.'); serviceIdToDelete = null;
                });
            }
        });

        // --- Initial Display ---
        updateDisplay();

    });
</script>