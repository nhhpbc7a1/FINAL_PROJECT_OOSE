<div class="notification-page">
  <div class="page-header">
    <h1>Messages & Notifications</h1>
    <div class="notification-actions">
      {{#if hasNotifications}}
        <button id="markAllReadBtn" class="btn btn-outline" title="Mark all notifications as read" onclick="document.getElementById('markAllReadForm').submit(); return false;">
          <i class="ti ti-checks"></i>
          Mark all as read
        </button>
      {{/if}}
    </div>
  </div>
  
  {{#if error}}
    <div class="error-container">
      <div class="error-message">{{error}}</div>
    </div>
  {{else}}
    <div class="notification-container">
      {{#if hasNotifications}}
        <div class="notification-list">
          {{#each notifications}}
            <div class="notification-card {{#unless isRead}}unread{{/unless}}" data-id="{{notificationId}}">
              <div class="notification-icon">
                {{#if isRead}}
                  <div class="icon read-icon">
                    <i class="ti ti-mail-opened"></i>
                  </div>
                {{else}}
                  <div class="icon unread-icon">
                    <i class="ti ti-mail"></i>
                  </div>
                {{/if}}
              </div>
              <div class="notification-content">
                <div class="notification-header">
                  <h3 class="notification-title">{{title}}</h3>
                  <div class="notification-time">{{timeAgo}}</div>
                </div>
                <div class="notification-body">
                  <p>{{content}}</p>
                </div>
                <div class="notification-meta">
                  <span class="notification-date">{{formattedDate}} at {{formattedTime}}</span>
                </div>
              </div>
              <div class="notification-actions">
                {{#unless isRead}}
                  <button class="mark-read-btn" data-tooltip="Mark as read">
                    <i class="ti ti-check"></i>
                  </button>
                {{/unless}}
                <form action="/doctor/messages/delete/{{notificationId}}" method="POST" style="display: inline;">
                  <button type="submit" class="delete-btn" data-tooltip="Delete">
                    <i class="ti ti-trash"></i>
                  </button>
                </form>
              </div>
            </div>
          {{/each}}
        </div>
      {{else}}
        <div class="empty-state">
          <div class="empty-icon">
            <i class="ti ti-mailbox"></i>
          </div>
          <h2>No notifications</h2>
          <p>You don't have any notifications at the moment.</p>
        </div>
      {{/if}}
    </div>
  {{/if}}
</div>

<!-- Notification Popup -->
<div id="notificationPopup" class="notification-popup">
  <div class="notification-popup-header">
    <h3>Notifications</h3>
    <button id="closePopupBtn">
      <i class="ti ti-x"></i>
    </button>
  </div>
  <div id="popupNotifications" class="popup-notification-list">
    {{#if hasNotifications}}
      {{#each notifications}}
        {{#unless isRead}}
          <div class="popup-notification-item" data-id="{{notificationId}}">
            <div class="popup-notification-content">
              <h4>{{title}}</h4>
              <p>{{content}}</p>
              <div class="notification-time">{{timeAgo}}</div>
            </div>
            <button class="popup-mark-read-btn">
              <i class="ti ti-check"></i>
            </button>
          </div>
        {{/unless}}
      {{/each}}
    {{else}}
      <div class="empty-popup-state">
        <p>No new notifications</p>
      </div>
    {{/if}}
  </div>
  <div class="popup-footer">
    <a href="/doctor/messages" class="view-all-link">View all notifications</a>
  </div>
</div>

<!-- Add another hidden form for mark all as read -->
<form id="markAllReadForm" method="POST" action="/doctor/messages/mark-all-read" style="display: none;"></form>

<!-- CSS Styles -->
<style>
  /* Main Notification Page */
  .notification-page {
    padding: 24px;
    max-width: 1000px;
    margin: 0 auto;
    min-height: calc(100vh - 120px);
  }
  
  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
    border-bottom: 2px solid #e9ecef;
    padding-bottom: 16px;
  }
  
  .page-header h1 {
    font-size: 28px;
    color: #2c3e50;
    margin: 0;
    font-weight: 600;
  }
  
  .notification-container {
    background-color: #fff;
    border-radius: 16px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
    overflow: hidden;
    min-height: 400px;
    border: 1px solid rgba(0, 0, 0, 0.05);
  }
  
  .notification-list {
    max-height: 600px;
    overflow-y: auto;
  }
  
  .notification-card {
    display: flex;
    padding: 20px;
    border-bottom: 1px solid #eee;
    transition: all 0.3s ease;
    position: relative;
  }
  
  .notification-card:hover {
    background-color: #f8f9fa;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.03);
  }
  
  .notification-card.unread {
    background-color: rgba(13, 153, 255, 0.05);
    border-left: 4px solid #0D99FF;
  }
  
  .notification-icon {
    margin-right: 20px;
    display: flex;
    align-items: flex-start;
  }
  
  .icon {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }
  
  .icon i {
    font-size: 26px;
    transition: all 0.3s ease;
  }
  
  .notification-card:hover .icon {
    transform: scale(1.05);
  }
  
  .notification-card:hover .icon i {
    transform: scale(1.1);
  }
  
  .read-icon {
    background-color: rgba(13, 153, 255, 0.1);
    color: #0D99FF;
  }
  
  .unread-icon {
    background-color: rgba(255, 99, 71, 0.1);
    color: #ff6347;
  }
  
  .notification-content {
    flex: 1;
  }
  
  .notification-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    align-items: center;
  }
  
  .notification-title {
    font-size: 18px;
    font-weight: 600;
    margin: 0;
    color: #333;
  }
  
  .notification-card.unread .notification-title {
    color: #0D99FF;
  }
  
  .notification-time {
    font-size: 13px;
    color: #6c757d;
    font-weight: 500;
  }
  
  .notification-body p {
    margin: 0 0 12px;
    color: #4a4a4a;
    line-height: 1.6;
    font-size: 15px;
  }
  
  .notification-meta {
    font-size: 13px;
    color: #6c757d;
    display: flex;
    align-items: center;
  }
  
  .notification-meta::before {
    content: '';
    display: inline-block;
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background-color: #adb5bd;
    margin-right: 8px;
  }
  
  .notification-actions {
    display: flex;
    align-items: center;
  }
  
  .notification-actions button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
    border-radius: 8px;
    margin-left: 8px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .notification-actions button i {
    font-size: 20px;
    transition: all 0.3s ease;
  }
  
  .notification-actions .mark-read-btn {
    color: #0D99FF;
  }
  
  .notification-actions .delete-btn {
    color: #ff6347;
  }
  
  .notification-actions button:hover {
    background-color: rgba(0, 0, 0, 0.05);
    transform: scale(1.05);
  }
  
  .notification-actions button:hover i {
    transform: scale(1.1);
  }
  
  .btn {
    padding: 10px 18px;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.3s ease;
    font-size: 14px;
  }
  
  .btn-outline {
    background: none;
    border: 1.5px solid #0D99FF;
    color: #0D99FF;
  }
  
  .btn-outline:hover {
    background-color: rgba(13, 153, 255, 0.1);
    transform: translateY(-2px);
  }
  
  .btn-outline i {
    font-size: 18px;
  }
  
  /* Empty state */
  .empty-state {
    padding: 60px 40px;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 300px;
    position: relative;
    overflow: hidden;
    background: linear-gradient(to bottom, #f8f9fa, #ffffff);
  }
  
  .empty-state::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 5px;
    background: linear-gradient(90deg, #0D99FF, #38bdf8);
  }
  
  .empty-icon {
    margin-bottom: 20px;
    width: 80px;
    height: 80px;
    opacity: 0.6;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .empty-icon i {
    font-size: 64px;
    color: #0D99FF;
    opacity: 0.5;
  }
  
  .empty-state h2 {
    font-size: 24px;
    color: #2c3e50;
    margin-bottom: 12px;
  }
  
  .empty-state p {
    color: #6c757d;
    font-size: 16px;
    max-width: 400px;
    margin: 0 auto;
  }
  
  /* Error container */
  .error-container {
    padding: 20px;
    background-color: #fff;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    border-left: 4px solid #ff6347;
  }
  
  .error-message {
    color: #ff6347;
    font-weight: 500;
  }
  
  /* Notification Popup */
  .notification-popup {
    position: fixed;
    top: 70px;
    right: 20px;
    width: 380px;
    background: white;
    border-radius: 16px;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    display: none;
    overflow: hidden;
    animation: slideIn 0.3s ease-out;
    border: 1px solid rgba(0, 0, 0, 0.05);
  }
  
  @keyframes slideIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .notification-popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px;
    border-bottom: 1px solid #eee;
    background-color: #f8f9fa;
  }
  
  .notification-popup-header h3 {
    margin: 0;
    font-size: 18px;
    color: #2c3e50;
    font-weight: 600;
  }
  
  #closePopupBtn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 6px;
    border-radius: 8px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  #closePopupBtn i {
    font-size: 20px;
    color: #6c757d;
    transition: all 0.3s ease;
  }
  
  #closePopupBtn:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }
  
  #closePopupBtn:hover i {
    color: #0D99FF;
  }
  
  .popup-notification-list {
    max-height: 400px;
    overflow-y: auto;
    padding: 8px 0;
  }
  
  .popup-notification-item {
    padding: 16px;
    border-bottom: 1px solid #f0f0f0;
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    transition: all 0.3s ease;
  }
  
  .popup-notification-item:hover {
    background-color: #f8f9fa;
    transform: translateY(-2px);
  }
  
  .popup-notification-content {
    flex: 1;
    padding-right: 12px;
  }
  
  .popup-notification-content h4 {
    margin: 0 0 6px;
    font-size: 15px;
    color: #0D99FF;
    font-weight: 600;
  }
  
  .popup-notification-content p {
    margin: 0 0 8px;
    font-size: 14px;
    color: #4a4a4a;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .popup-mark-read-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
    border-radius: 8px;
    transition: all 0.3s ease;
    color: #0D99FF;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .popup-mark-read-btn i {
    font-size: 20px;
    transition: all 0.3s ease;
  }
  
  .popup-mark-read-btn:hover {
    background-color: rgba(13, 153, 255, 0.1);
    transform: scale(1.05);
  }
  
  .popup-mark-read-btn:hover i {
    transform: scale(1.1);
  }
  
  .empty-popup-state {
    padding: 30px 16px;
    text-align: center;
    color: #6c757d;
  }
  
  .popup-footer {
    padding: 14px 16px;
    text-align: center;
    border-top: 1px solid #eee;
    background-color: #f8f9fa;
  }
  
  .view-all-link {
    color: #0D99FF;
    text-decoration: none;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.3s ease;
    display: inline-block;
    padding: 6px 14px;
    border-radius: 8px;
  }
  
  .view-all-link:hover {
    text-decoration: none;
    background-color: rgba(13, 153, 255, 0.1);
    color: #0d8ae6;
    transform: translateY(-2px);
  }
  
  /* Badge for notification count */
  .notification-badge {
    position: absolute;
    top: -5px;
    right: -5px;
    background-color: #ff6347;
    color: white;
    border-radius: 50%;
    width: 18px;
    height: 18px;
    font-size: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    animation: pulse 1.5s infinite;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  
  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.1);
    }
    100% {
      transform: scale(1);
    }
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .notification-card {
      flex-direction: column;
    }
    
    .notification-icon {
      margin-right: 0;
      margin-bottom: 12px;
    }
    
    .notification-page {
      padding: 16px;
    }
    
    .page-header h1 {
      font-size: 24px;
    }
    
    .notification-popup {
      width: 90%;
      right: 5%;
      left: 5%;
    }
  }
  
  /* Hover effects */
  .notification-card .mark-read-btn,
  .notification-card .delete-btn {
    opacity: 0.8;
    transition: all 0.3s ease;
  }
  
  .notification-card:hover .mark-read-btn,
  .notification-card:hover .delete-btn {
    opacity: 1;
  }
  
  /* Animation */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .notification-card {
    animation: fadeIn 0.3s ease-out;
    animation-fill-mode: both;
  }
  
  /* Staggered animation for multiple cards */
  .notification-card:nth-child(1) { animation-delay: 0.05s; }
  .notification-card:nth-child(2) { animation-delay: 0.1s; }
  .notification-card:nth-child(3) { animation-delay: 0.15s; }
  .notification-card:nth-child(4) { animation-delay: 0.2s; }
  .notification-card:nth-child(5) { animation-delay: 0.25s; }
  .notification-card:nth-child(n+6) { animation-delay: 0.3s; }
  
  /* Tooltip for buttons */
  .notification-actions button {
    position: relative;
  }
  
  .notification-actions button::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(-5px);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 6px 10px;
    border-radius: 6px;
    font-size: 12px;
    opacity: 0;
    pointer-events: none;
    transition: all 0.3s;
    white-space: nowrap;
    visibility: hidden;
    font-weight: 500;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }
  
  .notification-actions button:hover::after {
    opacity: 1;
    transform: translateX(-50%) translateY(-10px);
    visibility: visible;
  }
  
  /* Transition effect when marking as read */
  .notification-card.reading {
    background-color: rgba(13, 153, 255, 0.03);
    transition: background-color 0.5s ease-out;
  }
</style>

<!-- JavaScript for functionality -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Document loaded, setting up event listeners');
    
    // Add hidden forms for actions
    const container = document.createElement('div');
    container.style.display = 'none';
    container.innerHTML = `
      <form id="markReadForm" method="POST" action="/doctor/messages/mark-read/">
        <input type="hidden" name="notificationId" id="markReadId">
      </form>
    `;
    document.body.appendChild(container);
    
    // Debug notification cards structure
    const cards = document.querySelectorAll('.notification-card');
    console.log('Found notification cards:', cards.length);
    cards.forEach((card, index) => {
      console.log(`Card ${index} - ID: ${card.dataset.id}, Class: ${card.className}`);
    });
    
    // Notification card actions (mark as read, delete)
    const markReadButtons = document.querySelectorAll('.mark-read-btn');
    console.log('Found mark read buttons:', markReadButtons.length);
    
    markReadButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        console.log('Mark as read button clicked');
        e.preventDefault();
        const card = this.closest('.notification-card');
        const notificationId = card.dataset.id;
        console.log('Marking notification as read:', notificationId);
        
        // Add visual feedback
        card.classList.add('reading');
        
        // Use form submission instead of fetch
        const form = document.getElementById('markReadForm');
        const input = document.getElementById('markReadId');
        form.action = `/doctor/messages/mark-read/${notificationId}`;
        input.value = notificationId;
        form.submit();
      });
    });
    
    // Header notification icon
    setupNotificationPopup();
    
    // Helper functions
    function updateEmptyState() {
      const notificationList = document.querySelector('.notification-list');
      if (notificationList && notificationList.children.length === 0) {
        const emptyState = `
          <div class="empty-state">
            <div class="empty-icon">
              <i class="ti ti-mailbox"></i>
            </div>
            <h2>No notifications</h2>
            <p>You don't have any notifications at the moment.</p>
          </div>
        `;
        notificationList.parentNode.innerHTML = emptyState;
      }
    }
    
    function updateUnreadCount() {
      // Count unread notifications
      const unreadCount = document.querySelectorAll('.notification-card.unread').length;
      
      // Update badge on header notification icon
      const headerNotificationIcon = document.querySelector('.header .notification');
      if (headerNotificationIcon) {
        // Remove existing badge if any
        const existingBadge = headerNotificationIcon.querySelector('.notification-badge');
        if (existingBadge) {
          existingBadge.remove();
        }
        
        // Add badge if there are unread notifications
        if (unreadCount > 0) {
          const badge = document.createElement('div');
          badge.className = 'notification-badge';
          badge.textContent = unreadCount > 9 ? '9+' : unreadCount;
          headerNotificationIcon.appendChild(badge);
        }
      }
      
      // Also update popup notifications
      updateNotificationPopup();
    }
    
    function setupNotificationPopup() {
      const notificationIcon = document.querySelector('.header .notification');
      const notificationPopup = document.getElementById('notificationPopup');
      const closePopupBtn = document.getElementById('closePopupBtn');
      
      if (notificationIcon && notificationPopup) {
        // Add badge to notification icon
        updateUnreadCount();
        
        // Toggle popup on notification icon click
        notificationIcon.addEventListener('click', function(e) {
          e.stopPropagation();
          notificationPopup.style.display = notificationPopup.style.display === 'block' ? 'none' : 'block';
        });
        
        // Close popup when clicking the close button
        closePopupBtn.addEventListener('click', function() {
          notificationPopup.style.display = 'none';
        });
        
        // Close popup when clicking outside
        document.addEventListener('click', function(e) {
          if (notificationPopup.style.display === 'block' && 
              !notificationPopup.contains(e.target) && 
              !notificationIcon.contains(e.target)) {
            notificationPopup.style.display = 'none';
          }
        });
        
        // Mark as read from popup
        document.querySelectorAll('.popup-mark-read-btn').forEach(button => {
          button.addEventListener('click', function() {
            const item = this.closest('.popup-notification-item');
            const notificationId = item.dataset.id;
            
            // Use form submission instead of fetch
            const form = document.getElementById('markReadForm');
            const input = document.getElementById('markReadId');
            form.action = `/doctor/messages/mark-read/${notificationId}`;
            input.value = notificationId;
            form.submit();
          });
        });
      }
    }
    
    function updateNotificationPopup() {
      const popupNotifications = document.getElementById('popupNotifications');
      if (!popupNotifications) return;
      
      // Clear existing notifications
      popupNotifications.innerHTML = '';
      
      // Add unread notifications to popup
      const unreadNotifications = document.querySelectorAll('.notification-card.unread');
      if (unreadNotifications.length > 0) {
        unreadNotifications.forEach(card => {
          const notificationId = card.dataset.id;
          const title = card.querySelector('.notification-title').textContent;
          const content = card.querySelector('.notification-body p').textContent;
          const timeAgo = card.querySelector('.notification-time').textContent;
          
          const popupItem = document.createElement('div');
          popupItem.className = 'popup-notification-item';
          popupItem.dataset.id = notificationId;
          popupItem.innerHTML = `
            <div class="popup-notification-content">
              <h4>${title}</h4>
              <p>${content}</p>
              <div class="notification-time">${timeAgo}</div>
            </div>
            <button class="popup-mark-read-btn">
              <i class="ti ti-check"></i>
            </button>
          `;
          
          popupNotifications.appendChild(popupItem);
          
          // Add event listener to the mark read button
          popupItem.querySelector('.popup-mark-read-btn').addEventListener('click', function() {
            const item = this.closest('.popup-notification-item');
            const notificationId = item.dataset.id;
            
            // Use form submission instead of fetch
            const form = document.getElementById('markReadForm');
            const input = document.getElementById('markReadId');
            form.action = `/doctor/messages/mark-read/${notificationId}`;
            input.value = notificationId;
            form.submit();
          });
        });
      } else {
        // Show empty state
        popupNotifications.innerHTML = `
          <div class="empty-popup-state">
            <p>No new notifications</p>
          </div>
        `;
      }
    }
    
    function updateEmptyPopupState() {
      const popupNotifications = document.getElementById('popupNotifications');
      if (popupNotifications && popupNotifications.children.length === 0) {
        popupNotifications.innerHTML = `
          <div class="empty-popup-state">
            <p>No new notifications</p>
          </div>
        `;
      }
    }
  });
</script> 