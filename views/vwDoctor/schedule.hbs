{{#section 'css'}}
<link rel="stylesheet" href="/public/css/doctor-side/schedule.css">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
{{/section}}

{{#section 'title'}}Doctor Schedule{{/section}}

<div class="card">
  <div class="section-header">
    <h2><i class="ti ti-calendar"></i> My Schedules</h2>
    <div class="date-selector">
      <input type="date" id="schedule-date" value="{{selectedDate}}">
      <button id="view-date"><i class="ti ti-search"></i> View</button>
    </div>
  </div>
  
  <div class="view-switcher">
    <div class="view-option" data-view="calendar"><i class="ti ti-calendar"></i> Calendar View</div>
    <div class="view-option active" data-view="list"><i class="ti ti-list"></i> List View</div>
  </div>
  
  <!-- Calendar View -->
  <div id="calendar" class="calendar-view" style="display: none;"></div>
  
  <!-- List View -->
  <div class="schedule-list active">
    {{#if doctorSchedules.length}}
      {{#each doctorSchedules}}
        <div class="schedule-item {{status}}">
          <div class="time-slot">
            <div class="time">{{formatTime startTime}} - {{formatTime endTime}}</div>
            <div class="date">{{formatDate workDate}}</div>
          </div>
          <div class="schedule-details">
            <div class="room">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 2C8.13 2 5 5.13 5 9C5 14.25 12 22 12 22C12 22 19 14.25 19 9C19 5.13 15.87 2 12 2ZM12 11.5C10.62 11.5 9.5 10.38 9.5 9C9.5 7.62 10.62 6.5 12 6.5C13.38 6.5 14.5 7.62 14.5 9C14.5 10.38 13.38 11.5 12 11.5Z" fill="#6c757d"/>
              </svg>
              {{#if roomNumber}}Room {{roomNumber}}{{else}}Room Not Assigned{{/if}}
            </div>
            <span class="schedule-status {{status}}">{{status}}</span>
          </div>
          <div class="actions">
            <a href="/doctor/appointments" class="view-btn"><i class="ti ti-eye"></i> View Appointments</a>
          </div>
        </div>
      {{/each}}
    {{else}}
      <div class="no-schedules">
        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M19 3H18V1H16V3H8V1H6V3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3ZM19 19H5V9H19V19ZM19 7H5V5H19V7ZM12 10H7V15H12V10Z" fill="currentColor"/>
        </svg>
        <p>No schedules found for the selected date.</p>
        <p>Please select another date or check your assigned schedules.</p>
      </div>
    {{/if}}
  </div>

  <!-- Schedule Summary -->
  {{#if summary}}
  <div class="schedule-summary">
    <div class="summary-header">
      <h3>Monthly Summary</h3>
    </div>
    <div class="summary-cards">
      <div class="summary-card total">
        <div class="summary-icon">
          <i class="ti ti-calendar-stats"></i>
        </div>
        <div class="summary-content">
          <span class="summary-value">{{summary.total}}</span>
          <span class="summary-label">Total Schedules</span>
        </div>
      </div>
      <div class="summary-card available">
        <div class="summary-icon">
          <i class="ti ti-check"></i>
        </div>
        <div class="summary-content">
          <span class="summary-value">{{summary.available}}</span>
          <span class="summary-label">Available</span>
        </div>
      </div>
      <div class="summary-card fullfilled">
        <div class="summary-icon">
          <i class="ti ti-users"></i>
        </div>
        <div class="summary-content">
          <span class="summary-value">{{summary.fullfilled}}</span>
          <span class="summary-label">Fulfilled</span>
        </div>
      </div>
    </div>
  </div>
  {{/if}}
</div>

{{#section 'js'}}
<script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Check if FullCalendar is loaded
    let calendar;
    const calendarEl = document.getElementById('calendar');
    
    if (typeof FullCalendar === 'undefined') {
      console.error('FullCalendar is not loaded');
      if (calendarEl) {
        calendarEl.innerHTML = '<div class="error-message">Calendar could not be loaded. Please refresh the page.</div>';
      }
    } else {
      try {
        // Get the schedule events data
        let scheduleEvents = {{{scheduleEvents}}};
        console.log('Schedule events:', scheduleEvents);
        
        // Initialize calendar with modern settings
        calendar = new FullCalendar.Calendar(calendarEl, {
          initialView: 'timeGridWeek',
          headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
          },
          events: scheduleEvents,
          height: 'auto',
          allDaySlot: false,
          slotMinTime: '07:00:00',
          slotMaxTime: '20:00:00',
          nowIndicator: true,
          navLinks: true,
          dayMaxEvents: true,
          businessHours: {
            daysOfWeek: [1, 2, 3, 4, 5, 6, 0], // Monday - Sunday
            startTime: '07:00',
            endTime: '20:00',
          },
          eventTimeFormat: {
            hour: '2-digit',
            minute: '2-digit',
            hour12: true
          },
          eventClick: function(info) {
            // Navigate to the appointments page
            try {
              const date = moment(info.event.start).format('YYYY-MM-DD');
              window.location.href = `/doctor/appointments?date=${date}`;
            } catch (error) {
              console.error('Error navigating to appointments:', error);
              window.location.href = '/doctor/appointments';
            }
          },
          eventClassNames: function(arg) {
            return [`event-${arg.event.extendedProps.status || 'default'}`];
          },
          eventContent: function(arg) {
            return {
              html: `
                <div class="fc-event-main-frame">
                  <div class="fc-event-title-container">
                    <div class="fc-event-title">${arg.event.title}</div>
                    <div class="fc-event-time">${arg.timeText}</div>
                  </div>
                </div>
              `
            };
          }
        });
        
        // Render the calendar when in calendar view
        if (document.querySelector('.view-option[data-view="calendar"]').classList.contains('active')) {
          setTimeout(() => {
            calendar.render();
          }, 0);
        }
        
      } catch (e) {
        console.error('Failed to initialize calendar:', e);
        if (calendarEl) {
          calendarEl.innerHTML = '<div class="error-message">Failed to initialize calendar: ' + e.message + '</div>';
        }
      }
    }
    
    // View switcher
    const viewOptions = document.querySelectorAll('.view-option');
    const calendarView = document.querySelector('.calendar-view');
    const listView = document.querySelector('.schedule-list');
    
    viewOptions.forEach(option => {
      option.addEventListener('click', function() {
        viewOptions.forEach(o => o.classList.remove('active'));
        this.classList.add('active');
        
        const view = this.getAttribute('data-view');
        if (view === 'calendar') {
          calendarView.style.display = 'block';
          listView.classList.remove('active');
          
          // Try to render calendar
          if (calendar) {
            setTimeout(() => {
              try {
                calendar.render();
                console.log('Calendar rendered successfully');
              } catch (error) {
                console.error('Error rendering calendar:', error);
              }
            }, 0);
          }
        } else {
          calendarView.style.display = 'none';
          listView.classList.add('active');
        }
      });
    });
    
    // Date selector
    const dateInput = document.getElementById('schedule-date');
    const viewDateBtn = document.getElementById('view-date');
    
    viewDateBtn.addEventListener('click', function() {
      const selectedDate = dateInput.value;
      if (selectedDate) {
        window.location.href = `/doctor/schedule?date=${selectedDate}`;
      }
    });
    
    // Add animation to schedule items
    const scheduleItems = document.querySelectorAll('.schedule-item');
    scheduleItems.forEach((item, index) => {
      item.style.animationDelay = `${index * 0.05}s`;
      item.classList.add('fade-in');
    });
  });
</script>
{{/section}} 